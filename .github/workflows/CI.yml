# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        id: python-setup
        with:
          python-version-file: "pyproject.toml"

      - name: Install UV
        uses: astral-sh/setup-uv@v7
        with:
          # version: latest
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"
          # cache-python: true
          
      - name: Ruff for Linting
        uses: astral-sh/ruff-action@v3
        with:
          version-file: pyproject.toml
          args: check --output-format=github --config pyproject.toml

      - name: Ruff for Formatting
        uses: astral-sh/ruff-action@v3
        with:
          version-file: pyproject.toml
          args: format --config pyproject.toml

      - name: Create Lock File
        run:  uv lock

      - name: Install the project and deps
        run:  uv sync --locked --all-extras --dev

      - name: Minimize uv cache
        run: uv cache prune --ci

      - name: Run Pytests
        run: uv run pytest app/test_main.py --doctest-modules --junitxml=junit/test-results-${{ steps.python-setup.outputs.python-version }}.xml

      - name: Upload pytest test results
        uses: actions/upload-atrifact@v4
        with:
          name: pytest-result-${{ steps.python-setup.outputs.python-version }}
          path: junit/test-results-${{ steps.python-setup.outputs.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}